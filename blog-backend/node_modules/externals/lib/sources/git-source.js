var Vow = require('vow'),
    Logger = require('../logger'),
    path = require('path'),
    childProcess = require('child_process');

function GitSource(options) {
    this._options = options;
    this._logger = new Logger('git');
};

GitSource.prototype = {

    fetch : function() {
        var promise = Vow.promise(),
            options = this._options,
            logger = this._logger,
            _this = this;

        var git = childProcess.execFile(
                '/usr/bin/env',
                [].concat(
                    'git',
                    'clone',
                    options.branch ? ['-b', options.branch] : [],
                    options.hash ? '-n' : [],
                    '--progress',
                    options.url,
                    options.path
                )
            );

        git.on('exit', function(code) {
            if (code !== 0) promise.reject(new Error(logger.getError()));

            if (options.hash) {
                _this._resetRepo().then(promise.fullfill);
            } else {
                return promise.fulfill();
            }
        });

        git.stderr.on('data', function(data) {
            logger.log(data);
        });

        git.stdout.on('data', function(data) {
            logger.log(data);
        });

        return promise;
    },

    _resetRepo : function() {
        var promise = Vow.promise(),
            options = this._options;

        var checkout = childProcess.execFile(
            '/usr/bin/env',
            ['git', 'checkout', options.hash],
            { cwd: path.resolve(options.path) }
        );

        checkout.on('exit', function(code) {
            if (code !== 0) promise.reject(new Error());

            promise.fulfill();
        });

        return promise;
    }

};

GitSource.getType = function() {
    return 'git';
};

GitSource.matchesUrl = function(url) {
    return /^git:\/\/|\.git$/.test(url);
};

module.exports = GitSource;
