var Vow = require('vow'),
    Logger = require('../logger'),
    childProcess = require('child_process');

function ZipSource(options) {
    this._options = options;
    this._logger = new Logger('zip');
}

ZipSource.prototype = {

    fetch : function() {
        var promise = Vow.promise(),
            options = this._options,
            logger = this._logger,
            _this = this;

        var curl = childProcess.execFile(
            '/usr/bin/env',
            [
                'curl',
                '-kSL',
                '-o', options.path + '.zip',
                options.url
            ]
        );

        curl.on('exit', function(code) {
            if (code !== 0) return promise.reject(new Error(logger.getError()));

            _this._unZip().then(promise.fulfill, promise.reject);
        });

        curl.stderr.on('data', function(data) {
            logger.error(data);
        });

        curl.stdout.on('data', function(data) {
            logger.log(data);
        });

        return promise;
    },

    _unZip : function() {
        var promise = Vow.promise(),
            options = this._options;

        var unzip = childProcess.execFile(
            '/usr/bin/env',
            [
                'unzip',
                options.path + '.zip',
                '-d', options.path
            ]
        );

        unzip.on('exit', function(code) {
            if (code !== 0) return promise.reject(new Error());
            promise.fulfill();
        });

        return promise;
    }

};

ZipSource.getType = function() {
    return 'zip';
};

ZipSource.matchesUrl = function(url) {
    return /\.zip$/.test(url);
}

module.exports = ZipSource;
